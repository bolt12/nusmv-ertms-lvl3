MODULE main

/-- 
    Este módulo modela uma linha com dois comboios ERTMS-TIMS e pretende verificar diversas propriedades 
    e invariantes.
    Não foi possível confirmar a veracidade das propriedades devido ao facto de após 4h, o NuSMV não ter
    demonstrado qualquer output.
--/

VAR
    line : array 0..2 of array 0..4 of { f, o, u, a }; -- Uma linha com 3 TTD's em que cada uma possui 5 VSS.
                                                       -- f: free | o: occupied | u: unknown | a: ambiguous
    trains : array 0..1 of 0..15; -- Dois comboios ERTMS-TIMS 

    is_integer : array 0..1 of boolean;

    break_positions : array 0..1 of -1..15; -- Posição onde os comboios se quebram.

    mas : array 0..1 of 0..15; -- Em comboios ERTMS-TIMS o MA é de VSS em VSS.

IVAR
    action : { a, b }; -- Tipos possíveis de ação
                       -- a : advance, b : break
    
    train : 0..1;      -- Comboio 0 / Comboio 1

-- INIT

DEFINE

    is_train0_in_ttd0 := trains[0] >= 0 & trains[0] < 5 ;
    is_train0_in_ttd1 := trains[0] >= 5 & trains[0] < 10 ;
    is_train0_in_ttd2 := trains[0] >= 10 & trains[0] < 15 ;

    is_train1_in_ttd0 := trains[1] >= 0 & trains[1] < 5 ;
    is_train1_in_ttd1 := trains[1] >= 5 & trains[1] < 10 ;
    is_train1_in_ttd2 := trains[1] >= 10 & trains[1] < 15 ;

    is_break0_in_ttd0 := break_positions[0] >= 0 & break_positions[0] < 5 ;
    is_break0_in_ttd1 := break_positions[0] >= 5 & break_positions[0] < 10 ;
    is_break0_in_ttd2 := break_positions[0] >= 10 & break_positions[0] < 15 ;

    is_break1_in_ttd0 := break_positions[1] >= 0 & break_positions[1] < 5 ;
    is_break1_in_ttd1 := break_positions[1] >= 5 & break_positions[1] < 10 ;
    is_break1_in_ttd2 := break_positions[1] >= 10 & break_positions[1] < 15 ;

    is_ttd0_free := line[0][0] = f & line[0][1] = f & line[0][2] = f & line[0][3] = f & line[0][4] = f;
    is_ttd1_free := line[1][0] = f & line[1][1] = f & line[1][2] = f & line[1][3] = f & line[1][4] = f;
    is_ttd2_free := line[2][0] = f & line[2][1] = f & line[2][2] = f & line[2][3] = f & line[2][4] = f;

    space_between := trains[1] - trains[0] - 1;
    
    -- Como a informação de um TTD é segura, quando os comboios saem da mesma TTD, a anterior é libertada.
    ttd_is_safe_integer := (is_train0_in_ttd1 & is_integer[0] & is_train1_in_ttd1 & is_integer[1] -> is_ttd0_free) &
                           (is_train0_in_ttd2 & is_integer[0] & is_train1_in_ttd2 & is_integer[1] & !is_break0_in_ttd0
                            -> (is_ttd1_free & is_ttd0_free));

    -- Integridade pode ser confirmada, e assumindo que o comboio de trás (0) está integro, todas as VSS's no TTD em questão estão livres
    -- Ex: 
    --   | f | f | f | o0 | f |
    integrity_integer := (trains[0] mod 5 = 1 & is_integer[0] -> line[trains[0]/5][0] = f) &
                         (trains[0] mod 5 = 2 & is_integer[0] -> line[trains[0]/5][0] = f & line[trains[0]/5][1] = f) &
                         (trains[0] mod 5 = 3 & is_integer[0] -> line[trains[0]/5][0] = f & line[trains[0]/5][1] = f & line[trains[0]/5][2] = f) &
                         (trains[0] mod 5 = 4 & is_integer[0] -> line[trains[0]/5][0] = f & line[trains[0]/5][1] = f & line[trains[0]/5][2] = f &
                          line[trains[0]/5][3] = f);

    -- Integridade pode ser confirmada, e assumindo que os dois comboios estão integros e no mesmo TTD, todas as VSS's entre eles estão livres.
    -- Ex: 
    --   {| o0 | f | f | f | o1 |}
    integrity_b_intgr := (is_integer[0] & is_integer[1] & is_train0_in_ttd0 & is_train1_in_ttd0 
                          -> ( ( (trains[0] mod 5)+1 < space_between) ? 
                                    line[0][(trains[0] mod 5)+1] = f : 
                                    line[0][(trains[0] mod 5)+1] = line[0][(trains[1] mod 5)] &
                               ( (trains[0] mod 5)+2 < space_between) ? 
                                    line[0][(trains[0] mod 5)+2] = f : 
                                    line[0][(trains[0] mod 5)+2] = line[0][(trains[1] mod 5)] &
                               ( (trains[0] mod 5)+3 < space_between) ? 
                                    line[0][(trains[0] mod 5)+3] = f : 
                                    line[0][(trains[0] mod 5)+3] = line[0][(trains[1] mod 5)]
                             )) &
                         (is_integer[0] & is_integer[1] & is_train0_in_ttd1 & is_train1_in_ttd1 
                          -> ( ( (trains[0] mod 5)+1 < space_between) ? 
                                    line[1][(trains[0] mod 5)+1] = f : 
                                    line[1][(trains[0] mod 5)+1] = line[1][(trains[1] mod 5)] &
                               ( (trains[0] mod 5)+2 < space_between) ? 
                                    line[1][(trains[0] mod 5)+2] = f : 
                                    line[1][(trains[0] mod 5)+2] = line[1][(trains[1] mod 5)] &
                               ( (trains[0] mod 5)+3 < space_between) ? 
                                    line[1][(trains[0] mod 5)+3] = f : 
                                    line[1][(trains[0] mod 5)+3] = line[1][(trains[1] mod 5)]
                             )) &
                         (is_integer[0] & is_integer[1] & is_train0_in_ttd2 & is_train1_in_ttd2 
                          -> ( ( (trains[0] mod 5)+1 < space_between) ? 
                                    line[2][(trains[0] mod 5)+1] = f : 
                                    line[2][(trains[0] mod 5)+1] = line[2][(trains[1] mod 5)] &
                               ( (trains[0] mod 5)+2 < space_between) ? 
                                    line[2][(trains[0] mod 5)+2] = f : 
                                    line[2][(trains[0] mod 5)+2] = line[2][(trains[1] mod 5)] &
                               ( (trains[0] mod 5)+3 < space_between) ? 
                                    line[2][(trains[0] mod 5)+3] = f : 
                                    line[2][(trains[0] mod 5)+3] = line[2][(trains[1] mod 5)]
                             ));

    -- Integridade pode ser confirmada, mas caso comboio de trás (0) não esteja integro e o da frente (1) está integro, 
    -- todas as VSS's no TTD em que não houve quebra estão livres.
    -- Ex: 
    --    break_position[0] = 4 & train[0] = 11 -> {| f | f | f | f | u0 |}{| f | f | f | f | f |}{| f | o0 | f | o1 | f |}
    integrity_non_integer_train0 := (is_break0_in_ttd0 & !is_break1_in_ttd1 & !is_break1_in_ttd2 -> is_ttd1_free & is_ttd2_free) &
                                    (is_break0_in_ttd1 & !is_break1_in_ttd2 -> is_ttd2_free);

    -- Integridade pode ser confirmada, mas caso comboio da frente (1) não esteja integro, 
    -- todas as VSS's no TTD em que não houve quebra estão livres.
    -- Ex: 
    --    break_position[1] = 4 & train[1] = 11 -> {| f | f | f | o0 | u1 |}{| f | f | f | f | f |}{| f | o1 | f | f | f |}
    integrity_non_integer_train1 := (is_break1_in_ttd0 -> is_ttd1_free & is_ttd2_free) &
                                    (is_break1_in_ttd1 -> is_ttd2_free);

ASSIGN
    init(trains[0]) := 0;
    init(trains[1]) := 1;
    init(mas[0]) := 0;
    init(mas[1]) := 2;
    init(is_integer[0]) := TRUE;
    init(is_integer[1]) := TRUE;
    init(break_positions[0]) := -1;
    init(break_positions[1]) := -1;

/--
Estado inicial tendo em conta a posição inicial do train.

    init(line[0][0]) := o; -- Posição do comboio 0
    init(line[0][1]) := o; -- Posição do comboio 1 
    init(line[0][2]) := u;
    init(line[0][3]) := u; 
    init(line[0][4]) := u;  
    init(line[1][0]) := f; -- TTD 1
    init(line[1][1]) := f;
    init(line[1][2]) := f;
    init(line[1][3]) := f;
    init(line[1][4]) := f;
    init(line[2][0]) := f; -- TTD 2
    init(line[2][1]) := f;
    init(line[2][2]) := f;
    init(line[2][3]) := f;
    init(line[2][4]) := f;
--/

--/ *********** COMBOIO 0 *********** --/

    next(mas[0]) := case
                   mas[0] = 13 : mas[0];
                   is_train0_in_ttd0 & line[0][(trains[0] + 1) mod 5] = f : trains[0] + 1;
                   trains[0] = 4 & line[1][0] = f : trains[0] + 1;                              -- A conta ((train + 1) mod 5) não inclui a mudança de TTD
                   is_train0_in_ttd1 & line[1][(trains[0] + 1) mod 5] = f : trains[0] + 1;
                   trains[0] = 9 & line[2][0] = f : trains[0] + 1;                              -- A conta ((train + 1) mod 5) não inclui a mudança de TTD
                   is_train0_in_ttd2 & line[2][(trains[0] + 1) mod 5] = f : trains[0] + 1;
                   TRUE : mas[0];
                esac;

    next(trains[0]) := case
                        trains[0] = 13 : 13;
                        trains[0] < mas[0] & action = a & train = 0 : trains[0] + 1; -- O comboio avança caso o MA lhe diga que pode avançar
                        TRUE : trains[0];
                      esac;

    next(is_integer[0]) := case
                            train = 0 & action = b & is_integer[0] = TRUE 
                            & break_positions[0] = -1 : FALSE;                          -- Se o comboio ainda não se partiu, o comboio parte-se
                            train = 0 & action = b & is_integer[0] = FALSE : FALSE;        -- Caso o comboio já se tenha partido, não se parte novamente
                            train = 0 & is_break0_in_ttd0 & is_train0_in_ttd2 : TRUE;   /-- Caso o comboio esteja duas TTD's à frente da TTD onde houve
                                                                                            quebra, então pode ser considerado integer outra vez
                                                                                        --/
                            TRUE : is_integer[0];
                           esac;

    next(break_positions[0]) := case
                                 !is_integer[0] & break_positions[0] = -1 : trains[0];
                                 TRUE : break_positions[0];
                                esac;
                                
                           
--/ *********** COMBOIO 1 *********** --/

    next(mas[1]) := case
                   mas[1] = 14 : mas[1];
                   is_train1_in_ttd0 & line[0][(trains[1] + 1) mod 5] = f : trains[1] + 1;
                   trains[1] = 4 & line[1][0] = f : trains[1] + 1;                              -- A conta ((train + 1) mod 5) não inclui a mudança de TTD
                   is_train1_in_ttd1 & line[1][(trains[1] + 1) mod 5] = f : trains[1] + 1;
                   trains[1] = 9 & line[2][0] = f : trains[1] + 1;                              -- A conta ((train + 1) mod 5) não inclui a mudança de TTD
                   is_train1_in_ttd2 & line[2][(trains[1] + 1) mod 5] = f : trains[1] + 1;
                   TRUE : mas[1];
                esac;

    next(trains[1]) := case
                        trains[1] = 14 : 14;
                        trains[1] < mas[1] & action = a & train = 1 : trains[1] + 1; -- O comboio avança caso o MA lhe diga que pode avançar
                        TRUE : trains[0];
                      esac;

    next(is_integer[1]) := case
                            train = 1 & action = b & is_integer[1] = TRUE 
                            & break_positions[1] = -1 : FALSE;                          -- Se o comboio ainda não se partiu, o comboio parte-se
                            train = 1 & action = b & is_integer[1] = FALSE : FALSE;        -- Caso o comboio já se tenha partido, não se parte novamente
                            train = 1 & is_break1_in_ttd0 & is_train1_in_ttd2 : TRUE;   /-- Caso o comboio esteja duas TTD's à frente da TTD onde houve
                                                                                            quebra, então pode ser considerado integer outra vez
                                                                                        --/
                            TRUE : is_integer[1];
                           esac;

    next(break_positions[1]) := case
                                 !is_integer[1] & break_positions[1] = -1 : trains[1];
                                 TRUE : break_positions[1];
                                esac;

--/ *********** LINHA *********** --/

    line[0][0] := case
                    is_train0_in_ttd0 & is_integer[0] & trains[0] > 0 : f;       /-- Se o comboio de trás (0) está no TTD em questão e está integro
                                                                                     mas num VSS à frente do VSS em questão então passa a "free"
                                                                                 --/
                    is_train1_in_ttd0 & is_integer[1] & trains[1] > 0 : f;       /-- Se o comboio da frente (1) está no TTD em questão e está integro
                                                                                     mas num VSS à frente do VSS em questão então passa a "free"
                                                                                 --/
                    break_positions[0] = 0 & trains[0] = 0 : a;                  -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 0 & trains[1] = 0 : a;                  -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    is_integer[0] & trains[0] = 0 : o;                           -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 0 : o;                           -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] = 0 & trains[0] > 0 : u;                  -- Se o comboio (0) se partiu no VSS 0 mas a sua posição está a frente desse VSS
                    break_positions[1] = 0 & trains[1] > 0 : u;                  -- Se o comboio (1) se partiu no VSS 0 mas a sua posição está a frente desse VSS
                    !is_train0_in_ttd0 & is_integer[0] : f;                  -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd0 & is_integer[1] : f;                  -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac; 

    line[0][1] := case
                    is_integer[0] & trains[0] = 1 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 1 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 1 & trains[0] > 1 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 1 & trains[1] > 1 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 1 & trains[0] = 1 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 1 & trains[1] = 1 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd0 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd0 & is_integer[1] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac; 
    line[0][2] := case
                    is_integer[0] & trains[0] = 2 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 2 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 2 & trains[0] > 2 & !is_integer[0] : u;-- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 2 & trains[1] > 2 & !is_integer[1] : u;-- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 2 & trains[0] = 2 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 2 & trains[1] = 2 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd0 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd0 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[0][3] := case
                    is_integer[0] & trains[0] = 3 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 3 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 3 & trains[0] > 3 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 3 & trains[1] > 3 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 3 & trains[0] = 3 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 3 & trains[1] = 3 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd0 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd0 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[0][4] := case
                    is_integer[0] & trains[0] = 4 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 4 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 4 & trains[0] > 4 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 4 & trains[1] > 4 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 4 & trains[0] = 4 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 4 & trains[1] = 4 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd0 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd0 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac; -- 
    line[1][0] := case -- TTD 1
                    is_integer[0] & trains[0] = 5 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 5 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 5 & trains[0] > 5 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 5 & trains[1] > 5 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 5 & trains[0] = 5 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 5 & trains[1] = 5 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd1 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd1 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[1][1] := case
                    is_integer[0] & trains[0] = 6 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 6 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 6 & trains[0] > 6 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 6 & trains[1] > 6 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 6 & trains[0] = 6 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 6 & trains[1] = 6 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd1 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd1 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[1][2] := case
                    is_integer[0] & trains[0] = 7 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 7 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 7 & trains[0] > 7 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 7 & trains[1] > 7 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 7 & trains[0] = 7 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 7 & trains[1] = 7 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd1 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd1 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[1][3] := case
                    is_integer[0] & trains[0] = 8 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 8 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 8 & trains[0] > 8 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 8 & trains[1] > 8 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 8 & trains[0] = 8 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 8 & trains[1] = 8 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd1 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd1 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[1][4] := case
                    is_integer[0] & trains[0] = 9 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 9 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 9 & trains[0] > 9 & !is_integer[0]: u; -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 9 & trains[1] > 9 & !is_integer[1]: u; -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 9 & trains[0] = 9 : a;                 -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 9 & trains[1] = 9 : a;                 -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd1 & is_integer[0] : f;                     -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd1 & is_integer[1] : f;                     -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[2][0] := case  -- TTD 2
                    is_integer[0] & trains[0] = 10 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 11 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 10 & trains[0] > 10 & !is_integer[0]: u;   -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 11 & trains[1] > 11 & !is_integer[0]: u;   -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 10 & trains[0] = 10 : a;               -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 11 & trains[1] = 10 : a;               -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd2 & is_integer[0] : f;                      -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd2 & is_integer[1] : f;                      -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[2][1] := case
                    is_integer[0] & trains[0] = 11 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 11 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 11 & trains[0] > 11 & !is_integer[0]: u;   -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 11 & trains[1] > 11 & !is_integer[1]: u;   -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 11 & trains[0] = 11 : a;               -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 11 & trains[1] = 11 : a;               -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd2 & is_integer[0] : f;                      -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd2 & is_integer[1] : f;                      -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[2][2] := case
                    is_integer[0] & trains[0] = 12 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 12 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 12 & trains[0] > 12 & !is_integer[0]: u;   -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 12 & trains[1] > 12 & !is_integer[1]: u;   -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 12 & trains[0] = 12 : a;               -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 12 & trains[1] = 12 : a;               -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd2 & is_integer[0] : f;                      -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd2 & is_integer[1] : f;                      -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[2][3] := case
                    is_integer[0] & trains[0] = 13 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 13 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 13 & trains[0] > 13 & !is_integer[0]: u;   -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 13 & trains[1] > 13 & !is_integer[1]: u;   -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 13 & trains[0] = 13 : a;               -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 13 & trains[1] = 13 : a;               -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd2 & is_integer[0] : f;                      -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd2 & is_integer[1] : f;                      -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;
    line[2][4] := case
                    is_integer[0] & trains[0] = 14 : o;                          -- Se o comboio (0, integro) estiver na posição do VSS então ele está ocupado
                    is_integer[1] & trains[1] = 14 : o;                          -- Se o comboio (1, integro) estiver na posição do VSS então ele está ocupado
                    break_positions[0] < 14 & trains[0] > 14 & !is_integer[0]: u;   -- Se o comboio (0) se partiu para trás da posição atual e este não está integro
                    break_positions[1] < 14 & trains[1] > 14 & !is_integer[1]: u;   -- Se o comboio (1) se partiu para trás da posição atual e este não está integro
                    break_positions[0] = 14 & trains[0] = 14 : a;               -- Se o comboio (0) se parte no VSS em questão então passa a "ambiguous"
                    break_positions[1] = 14 & trains[1] = 14 : a;               -- Se o comboio (1) se parte no VSS em questão então passa a "ambiguous"
                    !is_train0_in_ttd2 & is_integer[0] : f;                      -- Caso o comboio (0, integro) não esteja no TTD em questão então este passa a "free"
                    !is_train1_in_ttd2 & is_integer[1] : f;                      -- Caso o comboio (1, integro) não esteja no TTD em questão então este passa a "free"
                    TRUE : f;
                  esac;

CTLSPEC AF trains[0] = 13;              -- Em todos os ramos, eventualmente o comboio de tras (0) chega ao destino.

CTLSPEC AF trains[1] = 14;              -- Em todos os ramos, eventualmente o comboio da frente (1) chega ao destino.

CTLSPEC AG integrity_integer;       -- Em todos os ramos, se o comboio está numa VSS de um TTD, então todos os VSS para trás desse estão "unknown",
                                    -- pois não é possível inferir sobre a integridade do comboio.

CTLSPEC AF integrity_non_integer_train0;   -- Em todos os ramos, eventualmenente, se o comboio de trás se partir, todas as VSS's no TTD em que não
                                           -- houve quebra estão livres.

CTLSPEC AF integrity_non_integer_train1;   -- Em todos os ramos, eventualmenente, se o comboio da frente se partir, todas as VSS's no TTD em que não
                                           -- houve quebra estão livres.

CTLSPEC AG ttd_is_safe_integer;     -- Em todos os ramos, como a informação vinda de uma TTD é segura, em todos os estados,
                                    -- se o comboio está numa TTD então todas para trás estão livres.

CTLSPEC AG integrity_b_intgr;       -- Em todos os ramos, em todos os estados, se ambos os comboios estão integros, na mesma TTD, os VSS's entre eles
                                    -- estão livres;

JUSTICE action = a;
JUSTICE train = 0;
JUSTICE train = 1;
